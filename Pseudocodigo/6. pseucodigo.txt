public class ProveedorClimaACUWeatherAPI implements ProveedorClima {
  public List<String> ultimasAlertas(String ciudad) {
    return proveedorClima.getAlertas(ciudad); // Se retorna las alertas del momento. TODO: Automaticamente?
  }

  public List<Alerta> consultarUltimasAlertasPara(String ciudad) {
    Map<String, Object> alertas = proveedorClima.getAlertas("Buenos Aires");
    List<String> ultimasAlertas = (List<String>) alertas.get("CurrentAlerts"); //Devuelve un objeto como [“STORM”, “HAIL”, ...]

    // TODO: Tiene que preguntar a cada rato el tiempo las nuevas alertas
    RepositorioAlertas.getInstance().actualizarAlertas(ultimasAlertas);
    RepositorioUsuarios.getInstance().getUsuarios().forEach(user -> user.hayAlertasNuevas(ultimasAlertas));

    return ultimasAlertas;
  }
}

public static RepositorioUsuarios {
  List<Usuario> usuarios = new ArrayList<>;
  private static final RepositorioUsuarios instance = new RepositorioUsuarios();

  public static RepositorioUsuarios getInstance() {
      return instance;
  }

  public List<Usuario> getUsuarios() {
    return usuarios;
  }

}

public class RepositorioAlertas {
  private static final RepositorioAlertas instance = new RepositorioAlertas();
  private List<String> alertas;

  private RepositorioAlertas() {
    this.alertas = new ArrayList<>();
  }

  public static RepositorioAlertas getInstance() {
    return instance;
  }

  public List<String> getAlertas() {
    return alertas;
  }

  public void actualizarAlertas(List<String> alertas) {
    this.alertas = alertas;
  }

}

public interface MedioDeComunicacion {
  
  void enviar();

}

public enum TipoAlerta {
  STORM,
  HAIL;
}

public class Alerta {
  private String mensajeAlerta;
  private TipoAlerta tipo; // Enum
  private List<MedioDeComunicacion> notificadores;

  public void setearNotificadores(Usuario usuario) {
    MailSender mailer = new MailSender();
    Mail mail = new Mail(usuario.getEmail(), "Nueva alerta metereologica", mensajeAlerta);

    mailer.agregarMailAEnviar(mail); // TODO: El Mailer en realidad no tiene como atributo una lista de mails, ver otra forma de encararlo polimorficamente!

    notificadores.add(mailer);
    notificadores.add(new NotificationService(mensajeAlerta, usuario));
  }

  public void notificar(Usuario usuario) {
    this.setearNotificadores(usuario);
    notificadores.stream().forEach(notificador -> notificador.enviar());
  }

}

public class AsesorImagen {
  public void sugerirAtuendo(Guardarropa guardarropa, String ciudad)

  public void actualizarSugerenciaSegun(String alerta) { 
    // TODO
  }
}

public class Usuario {
  private String email;
  private List<Atuendo> sugerenciasAtuendos; // Asumo que la sugerencia del dia es un atuendo por guardarropa propio
  private List<Notificador> notificablesPreferentes; // Tipos de notificaciones o acciones a las que se suscribio el usuario

  public String getEmail() {
    return email;
  }

  public void haySugerenciaNueva() {
    // Recibe una sugerencia por cada guardarropa.
    List<Atuendo> sugerencias = guardarropasPropios.stream().map(guardarropa -> ((AsesorImagen) ServiceLocator.getInstance()
        .get(AsesorImagen.class)).sugerirAtuendo(guardarropa, "Buenos Aires")).collect(Collectors.toList());

    sugerenciasAtuendos.clear();
    sugerenciasAtuendos.addAll(sugerencias);
  }

  // El proveedor del clima cuando hay nuevas alertas le avisa al usuario
  // y el usuario "pide" que le envien las notificaciones a las que se suscribio
  public void hayAlertasNuevas(List<String> alertas) {
    // Cuando el proveedor de clima actualiza las alertas debe actualizarse la sugerencia diaria
    notificablesPreferentes.forEach(notificable -> notificable.enviar(alertas, this));
  }
}

public interface Notificador {

  public void enviar(List<Alerta> alertas, Usuario usuario);

}

public class NotificadorSugerenciaAtuendo implements Notificador {

  // Si el usuario quiere recibir una nueva sugerencia cada vez que haya una alerta:
  public void enviar(List<String> alertas, Usuario usuario) {
    // TODO: Se realiza la sugerencia de atuendo por medio de una notificacion?
    // TODO: Sugerir deberia conocer la alerta y sugerir de acuerdo a la situacion?
    //  O con que el asesor pida las condiciones climaticas en el momento alcanza?
    usuario.haySugerenciaNueva();
  }

}

// Si el usuario se suscribe a ambas alertas (no se da la opcion de elegir):
public class NotificadorAlertaGranizo {

  // La alerta se encarga de notificar por los medios de comunicacion correspondientes.
  public void enviar(List<String> alertas, Usuario usuario) {
    if (alertas.contains("HAIL")) { // TODO: Se podria abstraer esta parte que solo depende de un string estado?
      new Alerta("Va a caer granizo! Evita salir con el auto.", TipoAlerta.HAIL).notificar(usuario);
    }
  }

}

public class NotificadorAlertaTormenta implements Notificador {

  // La alerta se encarga de notificar por los medios de comunicacion correspondientes.
  public void enviar(List<String> alertas, Usuario usuario) {
    if(alertas.contains("STORM")) {
      new Alerta("Va a haber una tormenta! Si salis, llevate un paraguas.", TipoAlerta.STORM).notificar(usuario);
    }
  }

}